return (shattering)
}
shattering = estimate.shattering(num.hyperplanes = 1, num.classes = 2, n.start = 1, n.end = 12, k=3, R = 3)
print(shattering)
#plot(shattering)
shattering = estimate.shattering(num.hyperplanes = 2, num.classes = 2, n.start = 1, n.end = 12, k=3, R = 2)
print(shattering)
plot(shattering)
library(combinat)
gen.maps <- function (region.index, num.classes, region.strings) {
classes = 1:num.classes + num.classes
if (length(region.index) == 0) {
return (region.strings)
}
x = region.index[1]
#print(x)
new.region.strings = NULL
for (s in region.strings) {
for (i in classes) {
new.s = gsub(x, i, s)
new.region.strings = c(new.region.strings, new.s)
}
}
return (gen.maps(region.index[region.index != x], num.classes, new.region.strings))
}
gen.all.classifications <- function (region.index, num.classes, region.string) {
return (gen.maps(region.index, num.classes, c(region.string)))
}
estimate.shattering <- function (num.hyperplanes = 2, num.classes = 2,
n.start = 1, n.end = 5, k = 2 , R = 2) {
shattering = NULL
origin = 1:num.classes
#perms = permn(origin)
for (n in n.start : n.end) {
print(paste("n",n, sep = " "))
# Generate the data sample
S = NULL
for (i in 1:R) {
S = cbind(S, rnorm(mean = 0, sd = 1, n = n))
}
# classify
hashTable = list()
max.attempts = n  * 10 ^ k
for (i in 1:max.attempts) {
labels = NULL
# get prediction from all hyperplanes
for (h in 1:num.hyperplanes) {
hyperplane = runif(min=-5, max=5, n=R+1)
s = cbind(S,1) %*% hyperplane
labels = cbind(labels, s)
}
labels[labels > 0] = 1
labels[labels <= 0] = 0
regions = list()
predicts = NULL
region.index = NULL
index = 1
for (r in 1:nrow(labels)) {
label = paste(labels[r,], collapse="")
if (is.null(regions[[label]])) {
regions[[label]] = index
region.index = c(region.index, index)
index = index + 1
}
predicts = c(predicts, regions[[label]])
}
key = paste(predicts, collapse="")
classifications = gen.all.classifications(region.index, num.classes, key)
for (classification in classifications) {
hashTable[[classification]] = 1
}
# swap the class label in the key
# 1122 -> 2211
# for (i in 1:length(perms)) {
#     new.key = key
#     com = perms[[i]]
#     for (j in 1:length(origin)) {
#         new.key = gsub(origin[j], as.numeric(com[j]) + num.classes, new.key)
#     }
#     for (k in 1:length(origin)) {
#         new.key = gsub(origin[k] + num.classes, origin[k], new.key)
#     }
#     hashTable[[new.key]] = 1
# }
#
}
shattering = rbind(shattering, c(n, length(hashTable)))
}
return (shattering)
}
shattering = estimate.shattering(num.hyperplanes = 2, num.classes = 2, n.start = 1, n.end = 12, k=3, R = 2)
print(shattering)
plot(shattering)
shattering = estimate.shattering(num.hyperplanes = 2, num.classes = 2, n.start = 1, n.end = 12, k=10, R = 2)
shattering = estimate.shattering(num.hyperplanes = 2, num.classes = 2, n.start = 1, n.end = 12, k=5, R = 2)
library(combinat)
gen.maps <- function (region.index, num.classes, region.strings) {
classes = 1:num.classes + num.classes
if (length(region.index) == 0) {
return (region.strings)
}
x = region.index[1]
#print(x)
new.region.strings = NULL
for (s in region.strings) {
for (i in classes) {
new.s = gsub(x, i, s)
new.region.strings = c(new.region.strings, new.s)
}
}
return (gen.maps(region.index[region.index != x], num.classes, new.region.strings))
}
gen.all.classifications <- function (region.index, num.classes, region.string) {
return (gen.maps(region.index, num.classes, c(region.string)))
}
estimate.shattering <- function (num.hyperplanes = 2, num.classes = 2,
n.start = 1, n.end = 5, k = 2 , R = 2) {
shattering = NULL
origin = 1:num.classes
#perms = permn(origin)
for (n in n.start : n.end) {
print(paste("n",n, sep = " "))
# Generate the data sample
S = NULL
for (i in 1:R) {
S = cbind(S, rnorm(mean = 0, sd = 1, n = n))
}
# classify
hashTable = list()
max.attempts = n ^ 2  * 10 ^ k
for (i in 1:max.attempts) {
labels = NULL
# get prediction from all hyperplanes
for (h in 1:num.hyperplanes) {
hyperplane = runif(min=-5, max=5, n=R+1)
s = cbind(S,1) %*% hyperplane
labels = cbind(labels, s)
}
labels[labels > 0] = 1
labels[labels <= 0] = 0
regions = list()
predicts = NULL
region.index = NULL
index = 1
for (r in 1:nrow(labels)) {
label = paste(labels[r,], collapse="")
if (is.null(regions[[label]])) {
regions[[label]] = index
region.index = c(region.index, index)
index = index + 1
}
predicts = c(predicts, regions[[label]])
}
key = paste(predicts, collapse="")
classifications = gen.all.classifications(region.index, num.classes, key)
for (classification in classifications) {
hashTable[[classification]] = 1
}
# swap the class label in the key
# 1122 -> 2211
# for (i in 1:length(perms)) {
#     new.key = key
#     com = perms[[i]]
#     for (j in 1:length(origin)) {
#         new.key = gsub(origin[j], as.numeric(com[j]) + num.classes, new.key)
#     }
#     for (k in 1:length(origin)) {
#         new.key = gsub(origin[k] + num.classes, origin[k], new.key)
#     }
#     hashTable[[new.key]] = 1
# }
#
}
shattering = rbind(shattering, c(n, length(hashTable)))
}
return (shattering)
}
shattering = estimate.shattering(num.hyperplanes = 2, num.classes = 2, n.start = 1, n.end = 12, k=3, R = 2)
shattering = estimate.shattering(num.hyperplanes = 2, num.classes = 2, n.start = 1, n.end = 10, k=3, R = 2)
print(shattering)
plot(shattering)
shattering = estimate.shattering(num.hyperplanes = 1, num.classes = 2, n.start = 1, n.end = 15, k=3, R = 3)
print(shattering)
plot(shattering)
hidden.layer1.shattering
library(combinat)
gen.maps <- function (region.index, num.classes, region.strings) {
classes = 1:num.classes + num.classes
if (length(region.index) == 0) {
return (region.strings)
}
x = region.index[1]
#print(x)
new.region.strings = NULL
for (s in region.strings) {
for (i in classes) {
new.s = gsub(x, i, s)
new.region.strings = c(new.region.strings, new.s)
}
}
return (gen.maps(region.index[region.index != x], num.classes, new.region.strings))
}
gen.all.classifications <- function (region.index, num.classes, region.string) {
return (gen.maps(region.index, num.classes, c(region.string)))
}
estimate.shattering <- function (num.hyperplanes = 2, num.classes = 2,
n.start = 1, n.end = 5, k = 2 , R = 2) {
shattering = NULL
origin = 1:num.classes
#perms = permn(origin)
for (n in n.start : n.end) {
print(paste("n",n, sep = " "))
# Generate the data sample
S = NULL
for (i in 1:R) {
S = cbind(S, rnorm(mean = 0, sd = 1, n = n))
}
# classify
hashTable = list()
max.attempts = n * 10 ^ k
for (i in 1:max.attempts) {
labels = NULL
# get prediction from all hyperplanes
for (h in 1:num.hyperplanes) {
hyperplane = runif(min=-5, max=5, n=R+1)
s = cbind(S,1) %*% hyperplane
labels = cbind(labels, s)
}
labels[labels > 0] = 1
labels[labels <= 0] = 0
regions = list()
predicts = NULL
region.index = NULL
index = 1
for (r in 1:nrow(labels)) {
label = paste(labels[r,], collapse="")
if (is.null(regions[[label]])) {
regions[[label]] = index
region.index = c(region.index, index)
index = index + 1
}
predicts = c(predicts, regions[[label]])
}
key = paste(predicts, collapse="")
classifications = gen.all.classifications(region.index, num.classes, key)
for (classification in classifications) {
hashTable[[classification]] = 1
}
}
shattering = rbind(shattering, c(n, length(hashTable)))
}
return (shattering)
}
# shattering = estimate.shattering(num.hyperplanes = 9, num.classes = 5, n.start = 1, n.end = 15, k=3, R = 7)
# print(shattering)
# shattering = estimate.shattering(num.hyperplanes = 5, num.classes = 5, n.start = 1, n.end = 15, k=3, R = 7)
# print(shattering)
estimate.shattering.nnet <- function(gn=15, num.hyperplanes = 2, k=3, R=2) {
shattering.one.neuron = estimate.shattering(num.hyperplanes = 1, R = R, n.start = 1, n.end = gn, k = k)
shattering.all.hyperplanes = cbind(1:gn,  shattering.one.neuron[,2] ^ num.hyperplanes)
return (shattering.all.hyperplanes)
}
hidden.layer1.shattering = estimate.shattering.nnet(gn=25, num.hyperplanes = 9, k=3, R=7)
hidden.layer2.shattering = estimate.shattering.nnet(gn=25, num.hyperplanes = 5, k=3, R=9)
output.layer.shattering = estimate.shattering.nnet(gn=25, num.hyperplanes = 3, k=3, R=5)
plot(hidden.layer1.shattering)
hidden.layer1.shattering
800^9
shattering.one.neuron = estimate.shattering(num.hyperplanes = 1, R = R, n.start = 1, n.end = gn, k = k)
gn = 20
R = 2
k = 3
shattering.one.neuron = estimate.shattering(num.hyperplanes = 1, R = R, n.start = 1, n.end = gn, k = k)
x = shattering.one.neuron[, 1]
y = shattering.one.neuron[, 2]
model = nls(y~ a*x^2 + b * x +c, start=list(a = 1,b = 1, c = 1))
plot(shattering.one.neuron)
lines(x,predict(model),col="red")
plot(x, y, xlab = 'number of points', ylab = "shattering")
lines(x,predict(model),col="red")
fit.regression <- function (gn = 20, R = 2, k = 3) {
shattering.one.neuron = estimate.shattering(num.hyperplanes = 1, R = R, n.start = 1, n.end = gn, k = k)
x = shattering.one.neuron[, 1]
y = shattering.one.neuron[, 2]
model = nls(y~ a*x^2 + b * x +c, start=list(a = 1,b = 1, c = 1))
shattering = predict(model, a)
plot(x, y, xlab = 'number of points', ylab = "shattering")
return (model)
}
estimate.shattering.nnet <- function(n, num.hyperplanes = 2, k=3, R=2) {
gn = 20
# get the shattering for one neuron
model = fit.regression.one.neuron(gn, R, k)
a = data.frame(n = n)
shattering = predict(model, a)
# compute the shattering for all neurons
shattering.all.neurons = shattering ^ num.hyperplanes
return (shattering.all.neurons)
}
# compute the shattering coefficient for each layer
hidden.layer1.shattering = estimate.shattering.nnet(gn=25, num.hyperplanes = 9, k=3, R=7)
# compute the shattering coefficient for each layer
hidden.layer1.shattering = estimate.shattering.nnet(n = 400, num.hyperplanes = 9, k=3, R=7)
fit.regression.one.neuron <- function (gn = 20, R = 2, k = 3) {
shattering.one.neuron = estimate.shattering(num.hyperplanes = 1, R = R, n.start = 1, n.end = gn, k = k)
x = shattering.one.neuron[, 1]
y = shattering.one.neuron[, 2]
model = nls(y~ a*x^2 + b * x +c, start=list(a = 1,b = 1, c = 1))
plot(x, y, xlab = 'number of points', ylab = "shattering")
return (model)
}
estimate.shattering.nnet <- function(n, num.hyperplanes = 2, k=3, R=2) {
gn = 20
# get the shattering for one neuron
model = fit.regression.one.neuron(gn, R, k)
a = data.frame(n = n)
shattering = predict(model, a)
# compute the shattering for all neurons
shattering.all.neurons = shattering ^ num.hyperplanes
return (shattering.all.neurons)
}
# compute the shattering coefficient for each layer
hidden.layer1.shattering = estimate.shattering.nnet(n = 400, num.hyperplanes = 9, k=3, R=7)
hidden.layer2.shattering = estimate.shattering.nnet(n = 400, num.hyperplanes = 5, k=3, R=9)
output.layer.shattering = estimate.shattering.nnet(n = 400, num.hyperplanes = 3, k=3, R=5)
hidden.layer1.shattering
estimate.shattering.nnet <- function(n, num.hyperplanes = 2, k=3, R=2) {
gn = 20
# get the shattering for one neuron
model = fit.regression.one.neuron(gn, R, k)
a = data.frame(n = n)
shattering = predict(model, a)
print(shattering)
# compute the shattering for all neurons
shattering.all.neurons = shattering ^ num.hyperplanes
return (shattering.all.neurons)
}
# compute the shattering coefficient for each layer
hidden.layer1.shattering = estimate.shattering.nnet(n = 400, num.hyperplanes = 9, k=3, R=7)
print(shattering)
gn = 20
# get the shattering for one neuron
model = fit.regression.one.neuron(gn, R, k)
print(model)
n
n = 400
a = data.frame(n = n)
a
shattering = predict(model, a)
shattering
predict(mode)
predict(model)
a
model
a = data.frame(x = n)
shattering = predict(model, a)
shattering
# compute the shattering coefficient for each layer
hidden.layer1.shattering = estimate.shattering.nnet(n = 400, num.hyperplanes = 9, k=3, R=7)
estimate.shattering.nnet <- function(n, num.hyperplanes = 2, k=3, R=2) {
gn = 20
# get the shattering for one neuron
model = fit.regression.one.neuron(gn, R, k)
a = data.frame(x = n)
shattering = predict(model, a)
# compute the shattering for all neurons
shattering.all.neurons = shattering ^ num.hyperplanes
return (shattering.all.neurons)
}
hidden.layer1.shattering
# compute the shattering coefficient for each layer
hidden.layer1.shattering = estimate.shattering.nnet(n = 400, num.hyperplanes = 9, k=3, R=7)
hidden.layer1.shattering
estimate.architecture.shattering <- function (n) {
# compute the shattering coefficient for each layer
hidden.layer1.shattering = estimate.shattering.nnet(n, num.hyperplanes = 9, k=3, R=7)
hidden.layer2.shattering = estimate.shattering.nnet(n, num.hyperplanes = 5, k=3, R=9)
output.layer.shattering = estimate.shattering.nnet(n, num.hyperplanes = 3, k=3, R=5)
return (hidden.layer1.shattering + hidden.layer2.shattering + output.layer.shattering)
}
estimate.architecture.shattering(100)
estimate.shattering.nnet <- function(n, num.hyperplanes = 2, k=3, R=2, model) {
gn = 20
# get the shattering for one neuron
a = data.frame(x = n)
shattering = predict(model, a)
# compute the shattering for all neurons
shattering.all.neurons = shattering ^ num.hyperplanes
return (shattering.all.neurons)
}
model1 = fit.regression.one.neuron(gn = 20, R = 7, k = 3)
model2 = fit.regression.one.neuron(gn = 20, R = 9, k = 3)
model3 = fit.regression.one.neuron(gn = 20, R = 5, k = 3)
model2 = fit.regression.one.neuron(gn = 20, R = 9, k = 3)
estimate.architecture.shattering <- function (n, model1, model2, model3) {
# compute the shattering coefficient for each layer
hidden.layer1.shattering = estimate.shattering.nnet(n, num.hyperplanes = 9, k=3, R=7, model = model1)
hidden.layer2.shattering = estimate.shattering.nnet(n, num.hyperplanes = 5, k=3, R=9, model = model2)
output.layer.shattering = estimate.shattering.nnet(n, num.hyperplanes = 3, k=3, R=5, model = model3)
return (hidden.layer1.shattering + hidden.layer2.shattering + output.layer.shattering)
}
shatterings = NULL
for (i in 1:200) {
shattering = estimate.architecture.shattering(i, model1, model2, model3)
shatterings = rbind(shatterings, shattering)
}
shatterings
shatterings = NULL
for (i in 1:1000) {
shattering = estimate.architecture.shattering(i, model1, model2, model3)
shatterings = rbind(shatterings, shattering)
}
shattering = cbind(1:1000, shatterings)
shatterings = NULL
for (i in 1:1000) {
shattering = estimate.architecture.shattering(i, model1, model2, model3)
shatterings = rbind(shatterings, shattering)
}
shatterings = cbind(1:1000, shatterings)
shatterings = NULL
for (i in 1:1000) {
shattering = estimate.architecture.shattering(i, model1, model2, model3)
shatterings = rbind(shatterings, shattering)
}
shatterings = cbind(1:1000, shatterings)
plot(shatterings)
plot(shatterings, xlab = "number of points", ylab = "shattering coefficient")
estimate.shattering(num.hyperplanes = 1, n.start = 1, n.end = 25, k = 3, num.classes = 2, R = 2)
shatterings = estimate.shattering(num.hyperplanes = 1, n.start = 1, n.end = 25, k = 3, num.classes = 2, R = 2)
shatterings
plot(shattering, xlab = "Number of points", ylab = "Shattering coefficient")
plot(shatterings, xlab = "Number of points", ylab = "Shattering coefficient")
read.table(file = 'shattering_R2_single_hyperplane.dat', sep = '\t', header = FALSE)
in.class.shatterings = read.table(file = 'shattering_R2_single_hyperplane.dat', sep = '\t', header = FALSE)
plot(in.class.shatterings)
in.class.shatterings
in.class.shatterings = read.table(file = 'shattering_R2_single_hyperplane.dat', header = FALSE)
in.class.shatterings
plot(in.class.shatterings)
plot(shatterings, xlab = "Number of points", ylab = "Shattering coefficient")
line(in.class.shatterings)
lines(in.class.shatterings)
# Compare with the code in the lecture
# 1 hyperplane, R^2
shatterings = estimate.shattering(num.hyperplanes = 1, n.start = 1, n.end = 15, k = 3, num.classes = 2, R = 2)
in.class.shatterings = read.table(file = 'shattering_R2_single_hyperplane.dat', header = FALSE)
plot(shatterings, xlab = "Number of points", ylab = "Shattering coefficient")
lines(in.class.shatterings)
points(in.class.shatterings)
# Compare with the code in the lecture
# 1 hyperplane, R^2
shatterings = estimate.shattering(num.hyperplanes = 1, n.start = 1, n.end = 15, k = 3, num.classes = 2, R = 2)
in.class.shatterings = read.table(file = 'shattering_R2_single_hyperplane.dat', header = FALSE)
plot(shatterings, xlab = "Number of points", ylab = "Shattering coefficient")
points(in.class.shatterings, col = "red")
# Compare with the code in the lecture
# 1 hyperplane, R^2
shatterings = estimate.shattering(num.hyperplanes = 1, n.start = 1, n.end = 15, k = 4, num.classes = 2, R = 2)
in.class.shatterings = read.table(file = 'shattering_R2_single_hyperplane.dat', header = FALSE)
plot(shatterings, xlab = "Number of points", ylab = "Shattering coefficient")
points(in.class.shatterings, col = "red")
in.class.shatterings = read.table(file = 'shattering_R2_single_hyperplane.dat', header = FALSE)
plot(shatterings, xlab = "Number of points", ylab = "Shattering coefficient")
points(in.class.shatterings, col = "red")
# Compare with the code in the lecture
# 1 hyperplane, R^2
shatterings = estimate.shattering(num.hyperplanes = 1, n.start = 1, n.end = 15, k = 5, num.classes = 2, R = 2)
# Compare with the code in the lecture
# 1 hyperplane, R^2
shatterings = estimate.shattering(num.hyperplanes = 1, n.start = 1, n.end = 15, k = 4.5, num.classes = 2, R = 2)
# 1 hyperplane, R^3
shatterings = estimate.shattering(num.hyperplanes = 1, n.start = 1, n.end = 15, k = 4, num.classes = 2, R = 3)
in.class.shatterings = read.table(file = 'shattering_R3_single_hyperplane.dat', header = FALSE)
plot(shatterings, xlab = "Number of points", ylab = "Shattering coefficient")
points(in.class.shatterings, col = "red")
in.class.shatterings = read.table(file = 'shattering_R3_single_hyperplane.dat', header = FALSE)
plot(shatterings, xlab = "Number of points", ylab = "Shattering coefficient")
points(in.class.shatterings, col = "red")
fit.regression.one.neuron <- function (gn = 20, R = 2, k = 3) {
shattering.one.neuron = estimate.shattering(num.hyperplanes = 1, R = R, n.start = 1, n.end = gn, k = k)
x = shattering.one.neuron[, 1]
y = shattering.one.neuron[, 2]
model = nls(y~ a*x^2 + b * x +c, start=list(a = 1,b = 1, c = 1))
plot(x, y, xlab = 'number of points', ylab = "shattering")
return (model)
}
estimate.shattering.nnet <- function(n, num.hyperplanes = 2, k=3, R=2, model) {
gn = 20
# get the shattering for one neuron
a = data.frame(x = n)
shattering = predict(model, a)
# compute the shattering for all neurons
shattering.all.neurons = shattering ^ num.hyperplanes
return (shattering.all.neurons)
}
estimate.architecture.shattering <- function (n, model1, model2, model3) {
# compute the shattering coefficient for each layer
hidden.layer1.shattering = estimate.shattering.nnet(n, num.hyperplanes = 9, k=3, R=7, model = model1)
hidden.layer2.shattering = estimate.shattering.nnet(n, num.hyperplanes = 5, k=3, R=9, model = model2)
output.layer.shattering = estimate.shattering.nnet(n, num.hyperplanes = 3, k=3, R=5, model = model3)
return (hidden.layer1.shattering + hidden.layer2.shattering + output.layer.shattering)
}
model1 = fit.regression.one.neuron(gn = 20, R = 7, k = 4)
model2 = fit.regression.one.neuron(gn = 20, R = 9, k = 4)
model3 = fit.regression.one.neuron(gn = 20, R = 5, k = 4)
shatterings = NULL
for (i in 1:1000) {
shattering = estimate.architecture.shattering(i, model1, model2, model3)
shatterings = rbind(shatterings, shattering)
}
shatterings = cbind(1:1000, shatterings)
plot(shatterings, xlab = "number of points", ylab = "shattering coefficient")
